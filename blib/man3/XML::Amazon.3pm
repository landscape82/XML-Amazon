.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "XML::Amazon 3pm"
.TH XML::Amazon 3pm "2009-07-08" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
XML::Amazon \- Perl extension for getting information from Amazon
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use XML::Amazon;
\&        
\&        my $amazon = XML::Amazon\->new(token => AMAZON\-ID, sak => Secret Access Key, locale => \*(Aquk\*(Aq);
\&        
\&        my $item = $amazon\->asin(\*(Aq0596101058\*(Aq);## ASIN access
\&        
\&        if ($amazon\->is_success){
\&                print $item\->title;
\&        }
\&        
\&        my $items = $amazon\->search(keywords => \*(AqPerl\*(Aq);## Search by \*(AqPerl\*(Aq
\&        
\&        foreach my $item ($items\->collection){
\&        my $title = $item\->title;
\&        utf8::encode($title);
\&        print $title . "A\*^Xn";
\&        }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
XML::Amazon provides a simple way to get information from Amazon. \fIXML::Amazon\fR can
connect to \s-1US\s0, \s-1JP\s0, \s-1UK\s0, \s-1FR\s0, \s-1DE\s0 and \s-1CA\s0.
.SH "USAGE"
.IX Header "USAGE"
.SS "XML::Amazon\->new(token => AMAZON-ID, associate => ASSOCIATE-ID, sak => Secret Access Key, locale => \s-1UK\s0)"
.IX Subsection "XML::Amazon->new(token => AMAZON-ID, associate => ASSOCIATE-ID, sak => Secret Access Key, locale => UK)"
Creates a new empty XML::Amazon object. You should specify your Amazon Web Service \s-1ID\s0 and Secret Access Key
(which can be obteined thorough 
http://www.amazon.com/gp/aws/registration/registration\-form.html). You can also specify
your locale (defalut: \s-1US\s0; you can choose us, uk, jp, fr, de, ca) and your Amazon
associate \s-1ID\s0 (default: webservices\-20, which is Amazon default).
.ie n .SS "$XML_Amazon\->asin(\s-1ASIN\s0)"
.el .SS "\f(CW$XML_Amazon\fP\->asin(\s-1ASIN\s0)"
.IX Subsection "$XML_Amazon->asin(ASIN)"
Returns an XML::Amazon::Item object whose \s-1ASIN\s0 is as given.
.ie n .SS "$XML_Amazon\->search(keywords => 'Perl', page => '2', type => 'Books')"
.el .SS "\f(CW$XML_Amazon\fP\->search(keywords => 'Perl', page => '2', type => 'Books')"
.IX Subsection "$XML_Amazon->search(keywords => 'Perl', page => '2', type => 'Books')"
Returns an XML::Amazon::Collection object. i<type> can be Blended, Books, Music, \s-1DVD\s0, etc.
.ie n .SS "$XML_Amazon\->is_success"
.el .SS "\f(CW$XML_Amazon\fP\->is_success"
.IX Subsection "$XML_Amazon->is_success"
Returns 1 when successful, otherwise 0.
.ie n .SS "$XML_Amazon_Collection\->total_results, $XML_Amazon_Collection\->total_pages, $XML_Amazon_Collection\->current_page"
.el .SS "\f(CW$XML_Amazon_Collection\fP\->total_results, \f(CW$XML_Amazon_Collection\fP\->total_pages, \f(CW$XML_Amazon_Collection\fP\->current_page"
.IX Subsection "$XML_Amazon_Collection->total_results, $XML_Amazon_Collection->total_pages, $XML_Amazon_Collection->current_page"
Returns as such.
.ie n .SS "$XML_Amazon_Collection\->collection"
.el .SS "\f(CW$XML_Amazon_Collection\fP\->collection"
.IX Subsection "$XML_Amazon_Collection->collection"
Returns a list of XML::Amazon::Item objects.
.ie n .SS "$XML_Amazon_Item\->title =head2 $XML_Amazon_Item\->artist =head2 $XML_Amazon_Item\->releasedate =head2 $XML_Amazon_Item\->origreleasedate"
.el .SS "\f(CW$XML_Amazon_Item\fP\->title =head2 \f(CW$XML_Amazon_Item\fP\->artist =head2 \f(CW$XML_Amazon_Item\fP\->releasedate =head2 \f(CW$XML_Amazon_Item\fP\->origreleasedate"
.IX Subsection "$XML_Amazon_Item->title =head2 $XML_Amazon_Item->artist =head2 $XML_Amazon_Item->releasedate =head2 $XML_Amazon_Item->origreleasedate"
.ie n .SS "$XML_Amazon_Item\->made_by"
.el .SS "\f(CW$XML_Amazon_Item\fP\->made_by"
.IX Subsection "$XML_Amazon_Item->made_by"
Returns authors when the item is a book, and likewise.
.ie n .SS "$XML_Amazon_Item\->publisher"
.el .SS "\f(CW$XML_Amazon_Item\fP\->publisher"
.IX Subsection "$XML_Amazon_Item->publisher"
.ie n .SS "$XML_Amazon_Item\->url"
.el .SS "\f(CW$XML_Amazon_Item\fP\->url"
.IX Subsection "$XML_Amazon_Item->url"
.ie n .SS "$XML_Amazon_Item\->image(size)"
.el .SS "\f(CW$XML_Amazon_Item\fP\->image(size)"
.IX Subsection "$XML_Amazon_Item->image(size)"
Returns the \s-1URL\s0 of the cover image. \fIsize\fR can be s, m, or l.
.ie n .SS "$XML_Amazon_Item\->price"
.el .SS "\f(CW$XML_Amazon_Item\fP\->price"
.IX Subsection "$XML_Amazon_Item->price"
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.SH "AUTHOR"
.IX Header "AUTHOR"
Yusuke Sugiyama, <ally@blinkingstar.net>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2009 by Yusuke Sugiyama
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.6 or,
at your option, any later version of Perl 5 you may have available.
